# https://rscz.ru/clones/axlsx/blob/b0c524ed2fb071ecb61f2b5b790462427e9b560d/examples/example.rb
# https://medium.com/@JasonCodes/ruby-on-rails-exporting-data-to-excel-b3b204281085
# https://coderwall.com/p/wlhfhg/rails-exporting-data-to-spreadsheets
# https://www.sitepoint.com/generate-excel-spreadsheets-rails-axlsx-gem/
# http://blog.magmalabs.io/2019/04/30/pdf-and-xlsx-reports-with-ruby-on-rails.html
# https://spin.atomicobject.com/2017/03/22/parsing-excel-files-ruby/
# https://www.ruby-toolbox.com/categories/reporting

wb = xlsx_package.workbook

wb.styles do |style|
  project_heading = style.add_style(b: true, sz: 18)
  heading = style.add_style(b: true, sz: 14, alignment: { horizontal: :center }, bg_color: '343A40', fg_color: 'FF',
                            border: { style: :thin, color: 'dee2e6', edges: %i[left right top bottom] })
  even_cell = style.add_style(sz: 14, alignment: { horizontal: :center }, bg_color: 'f2f2f2', fg_color: '212529',
                              border: { style: :thin, color: 'dee2e6', edges: %i[left right top bottom] })
  odd_cell = style.add_style(sz: 14, alignment: { horizontal: :center }, bg_color: 'FF', fg_color: '212529',
                             border: { style: :thin, color: 'dee2e6', edges: %i[left right top bottom] })

  wb.add_worksheet(name: 'Products') do |sheet|
    table_header_columns = @products_form.table_header_columns
    col_widths = [nil, [30] * table_header_columns.size].flatten
    sheet.column_widths(*col_widths)

    # Add a title row
    sheet.add_row([nil, 'List of products'], style: project_heading)

    # Add a blank row
    sheet.add_row([])

    # Create the header row
    sheet.add_row([nil] + table_header_columns, style: [nil, [heading] * table_header_columns.size].flatten)

    # Create entries for each product
    @products_form.records.each_with_index do |product, index|
      row = [nil]
      @products_form.table_columns.each do |column|
        row << product.public_send(column)
      end

      sheet.add_row(row, style: [nil, [even_cell] * @products_form.table_columns.size].flatten) if index.even?
      sheet.add_row(row, style: [nil, [odd_cell] * @products_form.table_columns.size].flatten) if index.odd?
    end
  end
end
